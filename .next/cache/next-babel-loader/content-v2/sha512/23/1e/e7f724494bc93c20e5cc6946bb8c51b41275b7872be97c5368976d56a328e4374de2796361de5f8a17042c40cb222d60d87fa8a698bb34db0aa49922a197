{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Blind2k\\\\Development\\\\Udemy\\\\Learn React-udemy\\\\316.Next.js\\\\meetingapp\\\\pages\\\\[meetupId]\\\\index.js\",\n    _this = this;\n\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport Head from \"next/head\";\n\nvar meetupId = function meetupId(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Meetup with meetapp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: props.meetupId.title,\n        content: props.meetupId.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 10\n    }, _this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupId.image,\n      title: props.meetupId.title,\n      address: props.meetupId.address,\n      description: props.meetupId.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 10\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }, _this);\n};\n\nexport var __N_SSG = true;\nexport default meetupId; // GET THE PATH AKA URL\n\n/*\n// GET THE PATH AKA URL\nexport async function getStaticPaths() {\n   try {\n      const uri = \"mongodb+srv://Zuriel:NgxSFumgpjuV5rb2@cluster0.7loqa.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n      const client = await MongoClient.connect(uri);\n      const database = client.db();\n      const colectionDatabase = database.collection(\"meetups\");\n      const meetups = await colectionDatabase.find({}, { _id: 1 }).toArray();\n      client.close();\n      \n      return {\n         fallback: \"blocking\", //AKA true. will not give 404\n         paths: meetups.map(meetup => ({\n            params: { meetupId: meetup._id.toString() },\n         })),\n   \n         // [\n         //    {\n         //       params: {\n         //          meetupId: \"m1\",\n         //       },\n         //    },\n         //    {\n         //       params: {\n         //          meetupId: \"m2\",\n         //       },\n         //    },\n         // ],\n      };\n   } catch (error) {\n      console.log(error);\n   }\n}\n*/","map":{"version":3,"sources":["C:/Users/Blind2k/Development/Udemy/Learn React-udemy/316.Next.js/meetingapp/pages/[meetupId]/index.js"],"names":["Fragment","MeetupDetail","Head","meetupId","props","title","description","image","address"],"mappings":";;;;;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACvB,sBACG,QAAC,QAAD;AAAA,4BACG,QAAC,IAAD;AAAA,8BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADH,eAEG;AAAM,QAAA,IAAI,EAAEA,KAAK,CAACD,QAAN,CAAeE,KAA3B;AAAkC,QAAA,OAAO,EAAED,KAAK,CAACD,QAAN,CAAeG;AAA1D;AAAA;AAAA;AAAA;AAAA,eAFH;AAAA;AAAA;AAAA;AAAA;AAAA,aADH,eAKG,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEF,KAAK,CAACD,QAAN,CAAeI,KAApC;AAA2C,MAAA,KAAK,EAAEH,KAAK,CAACD,QAAN,CAAeE,KAAjE;AAAwE,MAAA,OAAO,EAAED,KAAK,CAACD,QAAN,CAAeK,OAAhG;AAAyG,MAAA,WAAW,EAAEJ,KAAK,CAACD,QAAN,CAAeG;AAArI;AAAA;AAAA;AAAA;AAAA,aALH;AAAA;AAAA;AAAA;AAAA;AAAA,WADH;AASF,CAVD;;;AAYA,eAAeH,QAAf,C,CAEA;;AAoDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport Head from \"next/head\";\n\nconst meetupId = props => {\n   return (\n      <Fragment>\n         <Head>\n            <title>Meetup with meetapp</title>\n            <meta name={props.meetupId.title} content={props.meetupId.description} />\n         </Head>\n         <MeetupDetail image={props.meetupId.image} title={props.meetupId.title} address={props.meetupId.address} description={props.meetupId.description} />\n      </Fragment>\n   );\n};\n\nexport default meetupId;\n\n// GET THE PATH AKA URL\nexport async function getStaticPaths() {\n   try {\n      const response = await fetch(\"/api/get-meetups\");\n      const data = response.json();\n      console.log(data);\n\n      return {\n         fallback: \"blocking\", //AKA true. will not give 404\n         paths: data.map(meetup => ({\n            params: { meetupId: meetup._id.toString() },\n         })),\n   \n         // [\n         //    {\n         //       params: {\n         //          meetupId: \"m1\",\n         //       },\n         //    },\n         //    {\n         //       params: {\n         //          meetupId: \"m2\",\n         //       },\n         //    },\n         // ],\n      };\n   } catch (error) {\n      console.log(error);\n   }\n}\n// GET THE PROPS FROM THE PATH\nexport async function getStaticProps(context) {\n   const meetupId = context.params.meetupId;\n   const uri = \"mongodb+srv://Zuriel:NgxSFumgpjuV5rb2@cluster0.7loqa.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n   const client = await MongoClient.connect(uri);\n   const database = client.db();\n   const colectionDatabase = database.collection(\"meetups\");\n   const selectedMeetups = await colectionDatabase.findOne({ _id: ObjectId(meetupId) });\n\n   return {\n      props: {\n         meetupId: {\n            id: selectedMeetups._id.toString(),\n            title: selectedMeetups.title,\n            image: selectedMeetups.image,\n            description: selectedMeetups.description,\n         },\n      },\n      revalidate: 100,\n   };\n}\n\n/*\n// GET THE PATH AKA URL\nexport async function getStaticPaths() {\n   try {\n      const uri = \"mongodb+srv://Zuriel:NgxSFumgpjuV5rb2@cluster0.7loqa.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n      const client = await MongoClient.connect(uri);\n      const database = client.db();\n      const colectionDatabase = database.collection(\"meetups\");\n      const meetups = await colectionDatabase.find({}, { _id: 1 }).toArray();\n      client.close();\n      \n      return {\n         fallback: \"blocking\", //AKA true. will not give 404\n         paths: meetups.map(meetup => ({\n            params: { meetupId: meetup._id.toString() },\n         })),\n   \n         // [\n         //    {\n         //       params: {\n         //          meetupId: \"m1\",\n         //       },\n         //    },\n         //    {\n         //       params: {\n         //          meetupId: \"m2\",\n         //       },\n         //    },\n         // ],\n      };\n   } catch (error) {\n      console.log(error);\n   }\n}\n*/"]},"metadata":{},"sourceType":"module"}