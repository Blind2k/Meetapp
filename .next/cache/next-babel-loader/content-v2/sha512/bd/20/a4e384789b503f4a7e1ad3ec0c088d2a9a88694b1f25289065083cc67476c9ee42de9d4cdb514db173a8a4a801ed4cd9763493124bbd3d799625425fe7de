{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Blind2k\\\\Development\\\\Udemy\\\\Learn React-udemy\\\\316.Next.js\\\\meetingapp\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport Head from \"next/head\";\n\nconst meetupId = props => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Meetup with meetapp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: props.meetupId.title,\n        content: props.meetupId.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupId.image,\n      title: props.meetupId.title,\n      address: props.meetupId.address,\n      description: props.meetupId.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }, this);\n};\n\nexport default meetupId; // GET THE PATH AKA URL\n\nexport async function getStaticPaths() {\n  try {\n    const response = await fetch(\"/api/get-meetups\");\n    const data = response.json();\n    console.log(data);\n    return {\n      fallback: \"blocking\",\n      //AKA true. will not give 404\n      paths: data.map(meetup => ({\n        params: {\n          meetupId: meetup._id.toString()\n        }\n      }))\n    };\n  } catch (error) {\n    console.log(error);\n  }\n} // GET THE PROPS FROM THE PATH\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const uri = \"mongodb+srv://Zuriel:NgxSFumgpjuV5rb2@cluster0.7loqa.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n  const client = await MongoClient.connect(uri);\n  const database = client.db();\n  const colectionDatabase = database.collection(\"meetups\");\n  const selectedMeetups = await colectionDatabase.findOne({\n    _id: ObjectId(meetupId)\n  });\n  return {\n    props: {\n      meetupId: {\n        id: selectedMeetups._id.toString(),\n        title: selectedMeetups.title,\n        image: selectedMeetups.image,\n        description: selectedMeetups.description\n      }\n    },\n    revalidate: 100\n  };\n}\n/*\n// GET THE PATH AKA URL\nexport async function getStaticPaths() {\n   try {\n      const uri = \"mongodb+srv://Zuriel:NgxSFumgpjuV5rb2@cluster0.7loqa.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n      const client = await MongoClient.connect(uri);\n      const database = client.db();\n      const colectionDatabase = database.collection(\"meetups\");\n      const meetups = await colectionDatabase.find({}, { _id: 1 }).toArray();\n      client.close();\n      \n      return {\n         fallback: \"blocking\", //AKA true. will not give 404\n         paths: meetups.map(meetup => ({\n            params: { meetupId: meetup._id.toString() },\n         })),\n   \n         // [\n         //    {\n         //       params: {\n         //          meetupId: \"m1\",\n         //       },\n         //    },\n         //    {\n         //       params: {\n         //          meetupId: \"m2\",\n         //       },\n         //    },\n         // ],\n      };\n   } catch (error) {\n      console.log(error);\n   }\n}\n\n// GET THE PROPS FROM THE PATH\nexport async function getStaticProps(context) {\n   const meetupId = context.params.meetupId;\n   const uri = \"mongodb+srv://Zuriel:NgxSFumgpjuV5rb2@cluster0.7loqa.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n   const client = await MongoClient.connect(uri);\n   const database = client.db();\n   const colectionDatabase = database.collection(\"meetups\");\n   const selectedMeetups = await colectionDatabase.findOne({ _id: ObjectId(meetupId) });\n\n   return {\n      props: {\n         meetupId: {\n            id: selectedMeetups._id.toString(),\n            title: selectedMeetups.title,\n            image: selectedMeetups.image,\n            description: selectedMeetups.description,\n         },\n      },\n      revalidate: 100,\n   };\n}\n*/","map":{"version":3,"sources":["C:/Users/Blind2k/Development/Udemy/Learn React-udemy/316.Next.js/meetingapp/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","Fragment","MeetupDetail","Head","meetupId","props","title","description","image","address","getStaticPaths","response","fetch","data","json","console","log","fallback","paths","map","meetup","params","_id","toString","error","getStaticProps","context","uri","client","connect","database","db","colectionDatabase","collection","selectedMeetups","findOne","id","revalidate"],"mappings":"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","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport Head from \"next/head\";\n\nconst meetupId = props => {\n   return (\n      <Fragment>\n         <Head>\n            <title>Meetup with meetapp</title>\n            <meta name={props.meetupId.title} content={props.meetupId.description} />\n         </Head>\n         <MeetupDetail image={props.meetupId.image} title={props.meetupId.title} address={props.meetupId.address} description={props.meetupId.description} />\n      </Fragment>\n   );\n};\n\nexport default meetupId;\n\n// GET THE PATH AKA URL\nexport async function getStaticPaths() {\n   try {\n      const response = await fetch(\"/api/get-meetups\");\n      const data = response.json();\n      console.log(data);\n\n      return {\n         fallback: \"blocking\", //AKA true. will not give 404\n         paths: data.map(meetup => ({\n            params: { meetupId: meetup._id.toString() },\n         })),\n      };\n   } catch (error) {\n      console.log(error);\n   }\n}\n// GET THE PROPS FROM THE PATH\nexport async function getStaticProps(context) {\n   const meetupId = context.params.meetupId;\n   const uri = \"mongodb+srv://Zuriel:NgxSFumgpjuV5rb2@cluster0.7loqa.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n   const client = await MongoClient.connect(uri);\n   const database = client.db();\n   const colectionDatabase = database.collection(\"meetups\");\n   const selectedMeetups = await colectionDatabase.findOne({ _id: ObjectId(meetupId) });\n\n   return {\n      props: {\n         meetupId: {\n            id: selectedMeetups._id.toString(),\n            title: selectedMeetups.title,\n            image: selectedMeetups.image,\n            description: selectedMeetups.description,\n         },\n      },\n      revalidate: 100,\n   };\n}\n\n/*\n// GET THE PATH AKA URL\nexport async function getStaticPaths() {\n   try {\n      const uri = \"mongodb+srv://Zuriel:NgxSFumgpjuV5rb2@cluster0.7loqa.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n      const client = await MongoClient.connect(uri);\n      const database = client.db();\n      const colectionDatabase = database.collection(\"meetups\");\n      const meetups = await colectionDatabase.find({}, { _id: 1 }).toArray();\n      client.close();\n      \n      return {\n         fallback: \"blocking\", //AKA true. will not give 404\n         paths: meetups.map(meetup => ({\n            params: { meetupId: meetup._id.toString() },\n         })),\n   \n         // [\n         //    {\n         //       params: {\n         //          meetupId: \"m1\",\n         //       },\n         //    },\n         //    {\n         //       params: {\n         //          meetupId: \"m2\",\n         //       },\n         //    },\n         // ],\n      };\n   } catch (error) {\n      console.log(error);\n   }\n}\n\n// GET THE PROPS FROM THE PATH\nexport async function getStaticProps(context) {\n   const meetupId = context.params.meetupId;\n   const uri = \"mongodb+srv://Zuriel:NgxSFumgpjuV5rb2@cluster0.7loqa.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n   const client = await MongoClient.connect(uri);\n   const database = client.db();\n   const colectionDatabase = database.collection(\"meetups\");\n   const selectedMeetups = await colectionDatabase.findOne({ _id: ObjectId(meetupId) });\n\n   return {\n      props: {\n         meetupId: {\n            id: selectedMeetups._id.toString(),\n            title: selectedMeetups.title,\n            image: selectedMeetups.image,\n            description: selectedMeetups.description,\n         },\n      },\n      revalidate: 100,\n   };\n}\n*/"]},"metadata":{},"sourceType":"module"}