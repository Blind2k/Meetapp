{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Blind2k\\\\Development\\\\Udemy\\\\Learn React-udemy\\\\316.Next.js\\\\NextJsBasicModal\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport Head from \"next/head\";\n\nconst meetupId = props => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Meetup with meetapp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: props.meetupId.title,\n        content: props.meetupId.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupId.image,\n      title: props.meetupId.title,\n      address: props.meetupId.address,\n      description: props.meetupId.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }, this);\n};\n\nexport default meetupId; // GET THE PATH AKA URL\n\nexport async function getStaticPaths() {\n  const uri = \"mongodb+srv://Zuriel:NgxSFumgpjuV5rb2@cluster0.7loqa.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n  const client = await MongoClient.connect(uri);\n  const database = client.db();\n  const colectionDatabase = database.collection(\"meetups\");\n  const meetups = await colectionDatabase.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: true,\n    //AKA \"bloc\". will not give 404\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) // [\n    //    {\n    //       params: {\n    //          meetupId: \"m1\",\n    //       },\n    //    },\n    //    {\n    //       params: {\n    //          meetupId: \"m2\",\n    //       },\n    //    },\n    // ],\n\n  };\n} // GET THE PROPS FROM THE PATH\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const uri = \"mongodb+srv://Zuriel:NgxSFumgpjuV5rb2@cluster0.7loqa.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n  const client = await MongoClient.connect(uri);\n  const database = client.db();\n  const colectionDatabase = database.collection(\"meetups\");\n  const selectedMeetups = await colectionDatabase.findOne({\n    _id: ObjectId(meetupId)\n  });\n  return {\n    props: {\n      meetupId: {\n        id: selectedMeetups._id.toString(),\n        title: selectedMeetups.title,\n        image: selectedMeetups.image,\n        description: selectedMeetups.description\n      }\n    },\n    revalidate: 100\n  };\n}","map":{"version":3,"sources":["C:/Users/Blind2k/Development/Udemy/Learn React-udemy/316.Next.js/NextJsBasicModal/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","Fragment","MeetupDetail","Head","meetupId","props","title","description","image","address","getStaticPaths","uri","client","connect","database","db","colectionDatabase","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","toString","getStaticProps","context","selectedMeetups","findOne","id","revalidate"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACvB,sBACG,QAAC,QAAD;AAAA,4BACG,QAAC,IAAD;AAAA,8BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,eAEG;AAAM,QAAA,IAAI,EAAEA,KAAK,CAACD,QAAN,CAAeE,KAA3B;AAAkC,QAAA,OAAO,EAAED,KAAK,CAACD,QAAN,CAAeG;AAA1D;AAAA;AAAA;AAAA;AAAA,cAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,eAKG,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEF,KAAK,CAACD,QAAN,CAAeI,KAApC;AAA2C,MAAA,KAAK,EAAEH,KAAK,CAACD,QAAN,CAAeE,KAAjE;AAAwE,MAAA,OAAO,EAAED,KAAK,CAACD,QAAN,CAAeK,OAAhG;AAAyG,MAAA,WAAW,EAAEJ,KAAK,CAACD,QAAN,CAAeG;AAArI;AAAA;AAAA;AAAA;AAAA,YALH;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AASF,CAVD;;AAYA,eAAeH,QAAf,C,CAEA;;AACA,OAAO,eAAeM,cAAf,GAAgC;AACpC,QAAMC,GAAG,GAAG,8GAAZ;AACA,QAAMC,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CAAoBF,GAApB,CAArB;AACA,QAAMG,QAAQ,GAAGF,MAAM,CAACG,EAAP,EAAjB;AACA,QAAMC,iBAAiB,GAAGF,QAAQ,CAACG,UAAT,CAAoB,SAApB,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAT,EAAAA,MAAM,CAACU,KAAP;AACA,SAAO;AACJC,IAAAA,QAAQ,EAAE,IADN;AACY;AAChBC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAYC,MAAM,KAAK;AAC3BC,MAAAA,MAAM,EAAE;AAAEvB,QAAAA,QAAQ,EAAEsB,MAAM,CAACN,GAAP,CAAWQ,QAAX;AAAZ;AADmB,KAAL,CAAlB,CAFH,CAMJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjBI,GAAP;AAmBF,C,CACD;;AACA,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC3C,QAAM1B,QAAQ,GAAG0B,OAAO,CAACH,MAAR,CAAevB,QAAhC;AACA,QAAMO,GAAG,GAAG,8GAAZ;AACA,QAAMC,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CAAoBF,GAApB,CAArB;AACA,QAAMG,QAAQ,GAAGF,MAAM,CAACG,EAAP,EAAjB;AACA,QAAMC,iBAAiB,GAAGF,QAAQ,CAACG,UAAT,CAAoB,SAApB,CAA1B;AACA,QAAMc,eAAe,GAAG,MAAMf,iBAAiB,CAACgB,OAAlB,CAA0B;AAAEZ,IAAAA,GAAG,EAAEpB,QAAQ,CAACI,QAAD;AAAf,GAA1B,CAA9B;AAEA,SAAO;AACJC,IAAAA,KAAK,EAAE;AACJD,MAAAA,QAAQ,EAAE;AACP6B,QAAAA,EAAE,EAAEF,eAAe,CAACX,GAAhB,CAAoBQ,QAApB,EADG;AAEPtB,QAAAA,KAAK,EAAEyB,eAAe,CAACzB,KAFhB;AAGPE,QAAAA,KAAK,EAAEuB,eAAe,CAACvB,KAHhB;AAIPD,QAAAA,WAAW,EAAEwB,eAAe,CAACxB;AAJtB;AADN,KADH;AASJ2B,IAAAA,UAAU,EAAE;AATR,GAAP;AAWF","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport Head from \"next/head\";\n\nconst meetupId = props => {\n   return (\n      <Fragment>\n         <Head>\n            <title>Meetup with meetapp</title>\n            <meta name={props.meetupId.title} content={props.meetupId.description} />\n         </Head>\n         <MeetupDetail image={props.meetupId.image} title={props.meetupId.title} address={props.meetupId.address} description={props.meetupId.description} />\n      </Fragment>\n   );\n};\n\nexport default meetupId;\n\n// GET THE PATH AKA URL\nexport async function getStaticPaths() {\n   const uri = \"mongodb+srv://Zuriel:NgxSFumgpjuV5rb2@cluster0.7loqa.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n   const client = await MongoClient.connect(uri);\n   const database = client.db();\n   const colectionDatabase = database.collection(\"meetups\");\n   const meetups = await colectionDatabase.find({}, { _id: 1 }).toArray();\n\n   client.close();\n   return {\n      fallback: true, //AKA \"bloc\". will not give 404\n      paths: meetups.map(meetup => ({\n         params: { meetupId: meetup._id.toString() },\n      })),\n\n      // [\n      //    {\n      //       params: {\n      //          meetupId: \"m1\",\n      //       },\n      //    },\n      //    {\n      //       params: {\n      //          meetupId: \"m2\",\n      //       },\n      //    },\n      // ],\n   };\n}\n// GET THE PROPS FROM THE PATH\nexport async function getStaticProps(context) {\n   const meetupId = context.params.meetupId;\n   const uri = \"mongodb+srv://Zuriel:NgxSFumgpjuV5rb2@cluster0.7loqa.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n   const client = await MongoClient.connect(uri);\n   const database = client.db();\n   const colectionDatabase = database.collection(\"meetups\");\n   const selectedMeetups = await colectionDatabase.findOne({ _id: ObjectId(meetupId) });\n\n   return {\n      props: {\n         meetupId: {\n            id: selectedMeetups._id.toString(),\n            title: selectedMeetups.title,\n            image: selectedMeetups.image,\n            description: selectedMeetups.description,\n         },\n      },\n      revalidate: 100,\n   };\n}\n"]},"metadata":{},"sourceType":"module"}